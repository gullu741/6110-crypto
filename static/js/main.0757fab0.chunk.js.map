{"version":3,"sources":["component/gcd/input/GcdInput.js","component/gcd/output/GcdOutput.js","component/gcd/Gcd.js","App.js","reportWebVitals.js","index.js"],"names":["GcdInput","setOne","setTwo","computeGcd","className","TextField","label","type","onChange","e","parseInt","target","value","Button","variant","color","onClick","GcdOutput","result","c1","c2","c3","map","c","i","Gcd","props","useState","one","two","setResult","div","Math","floor","remainder","push","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4UA8BeA,MAzBf,YAA+C,IAA5BC,EAA2B,EAA3BA,OAAOC,EAAoB,EAApBA,OAAOC,EAAa,EAAbA,WAC7B,OACI,sBAAKC,UAAW,oBAAhB,UACI,qCACA,mDACA,cAACC,EAAA,EAAD,CAAWD,UAAU,QAAQE,MAAO,QACzBC,KAAM,SACNC,SAAU,SAAAC,GAAC,OAAER,EAAOS,SAASD,EAAEE,OAAOC,WAGjD,cAACP,EAAA,EAAD,CAAWD,UAAU,QAAQE,MAAO,SACzBC,KAAM,SACNC,SAAU,SAAAC,GAAC,OAAEP,EAAOQ,SAASD,EAAEE,OAAOC,WAEjD,cAACC,EAAA,EAAD,CAAQT,UAAU,QACVU,QAAQ,YACRC,MAAM,UACNC,QAASb,EAHjB,6B,YCUGc,MA3Bf,YAA8B,IAAVC,EAAS,EAATA,OAChB,GAAGA,EAAO,CAAC,IACFC,EAAYD,EAAZC,GAAGC,EAASF,EAATE,GAAGC,EAAMH,EAANG,GAEX,OACI,qBAAKjB,UAAU,qBAAf,SACI,gCACI,gCAEIe,EAAGG,KAAI,SAACC,EAAEC,GACN,OAAO,+BACH,6BAAKD,IACL,6BAAKH,EAAGI,IAAI,IACZ,6BAAKH,EAAGG,IAAI,gBASpC,OAAO,MCwBAC,MA3Cf,SAAaC,GAAQ,IAAD,EACMC,mBAAS,MADf,mBACTC,EADS,KACJ3B,EADI,OAEM0B,mBAAS,MAFf,mBAETE,EAFS,KAEJ3B,EAFI,OAGYyB,mBAAS,MAHrB,mBAGTT,EAHS,KAGDY,EAHC,KA+BhB,OACI,sBAAK1B,UAAU,YAAf,UACI,qBAAKA,UAAU,OAAf,SACI,cAAC,EAAD,CAAeH,SAAQC,SAAQC,WA7BxB,WAEf,GAAIyB,GAAOC,EAAK,CAGZ,IAFA,IAAIV,EAAK,CAACS,EAAKC,GAAMT,EAAK,CAAC,GAAIC,EAAK,CAAC,EAAG,GACpCG,EAAI,IACK,CACT,IAAIO,EAAMC,KAAKC,MAAMd,EAAGK,GAAKL,EAAGK,EAAI,IAChCU,EAAYf,EAAGK,GAAKL,EAAGK,EAAI,GAG/B,GAFAJ,EAAGe,KAAKJ,GACRZ,EAAGgB,KAAKD,GACU,IAAdA,EACA,MAEJV,IAGJ,IAAK,IAAIA,EAAI,EAAGA,EAAIJ,EAAGgB,OAAQZ,IAC3BH,EAAGc,KAAKd,EAAGG,EAAI,GAAMJ,EAAGI,EAAI,GAAKH,EAAGG,EAAI,IAE5CM,EAAU,CACNX,KAAIC,KAAIC,aAWZ,qBAAKjB,UAAU,QAAf,SACI,cAAC,EAAD,CAAWc,OAAQA,UCjCpBmB,MANf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0757fab0.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Button, TextField} from \"@material-ui/core\";\r\n\r\nimport \"./GcdInput.scss\"\r\n\r\nfunction GcdInput({setOne,setTwo,computeGcd}) {\r\n    return (\r\n        <div className={\"gcdInputContainer\"}>\r\n            <h1>GCD</h1>\r\n            <h2>gcd(first,second)</h2>\r\n            <TextField className=\"input\" label={\"First\"}\r\n                       type={\"number\"}\r\n                       onChange={e=>setOne(parseInt(e.target.value))}\r\n\r\n            />\r\n            <TextField className=\"input\" label={\"Second\"}\r\n                       type={\"number\"}\r\n                       onChange={e=>setTwo(parseInt(e.target.value))}\r\n            />\r\n            <Button className=\"input\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={computeGcd}\r\n            >\r\n                Compute Gcd\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GcdInput;","import React from 'react';\r\nimport \"./GcdOutput.scss\"\r\nfunction GcdOutput({result}) {\r\n    if(result){\r\n        let {c1,c2,c3} = result;\r\n\r\n        return (\r\n            <div className=\"gcdOutputContainer\">\r\n                <table>\r\n                    <tbody>\r\n                    {\r\n                        c1.map((c,i)=>{\r\n                            return <tr>\r\n                                <td>{c}</td>\r\n                                <td>{c2[i]||0}</td>\r\n                                <td>{c3[i]||0}</td>\r\n                            </tr>\r\n                        })\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }else{\r\n        return null\r\n    }\r\n\r\n}\r\n\r\nexport default GcdOutput;","import React, {useState} from 'react';\r\nimport GcdInput from \"./input/GcdInput\";\r\nimport \"./Gcd.scss\";\r\nimport GcdOutput from \"./output/GcdOutput\";\r\n\r\nfunction Gcd(props) {\r\n    const [one, setOne] = useState(null);\r\n    const [two, setTwo] = useState(null);\r\n    const [result, setResult] = useState(null);\r\n\r\n    const computeGcd = () => {\r\n        debugger\r\n        if (one && two) {\r\n            let c1 = [one, two], c2 = [0], c3 = [0, 1];\r\n            let i = 0;\r\n            while (true) {\r\n                let div = Math.floor(c1[i] / c1[i + 1])\r\n                let remainder = c1[i] % c1[i + 1]\r\n                c2.push(div)\r\n                c1.push(remainder)\r\n                if (remainder === 0) {\r\n                    break\r\n                }\r\n                i++;\r\n            }\r\n\r\n            for (let i = 2; i < c2.length; i++) {\r\n                c3.push(c3[i - 2] - (c2[i - 1] * c3[i - 1]))\r\n            }\r\n            setResult({\r\n                c1, c2, c3\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"left\">\r\n                <GcdInput {...{setOne, setTwo, computeGcd}}/>\r\n            </div>\r\n            <div className=\"right\">\r\n                <GcdOutput result={result}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Gcd;","import './App.css';\nimport Gcd from \"./component/gcd/Gcd\";\n\nfunction App() {\n  return (\n    <Gcd/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}